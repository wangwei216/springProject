<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>


    <!--

   总结：
    一、如何使用mapper代理的方式去实现一个操作数据库功能的步骤
        1. 首先你要有一个mybatis的全局xml配置文件(这个文件主要是连接数据库的)，
           然后还要有你代理的哪个mapper的xml路径(路径包括src下的包名/xml文件名，不要用 .)
        2. 你还要建立一个代理哪个的 xml文件这个xml的文件要有namespace(可以随便命名，但是最好是包名+ )
        3. 在含有命名空间的那个xml文件中写SQL语句(就是映射SQL语句)
            1),返回值类型(要考虑是否需要使用pojo来进行对查询条件进行包装)
            2),传入的参数类型
            3),注意这个id就是你要实现的功能接口的名字(这里就是映射把你要实现的接口类给映射进来)

    二、如果出现在SQL语句中出现的字段名和你定义的实体类的属性名不一致时：
        (1)第一个解决办法就是把不一致的按个字段名设置成和跟数据库的实体类的字段名一致，不然无法进行映射


        (2)可以自己定义一个ResultMap的结果集进行重新映射SQL语句
    三、如何使用Mybatis来实现分页功能的两种方法
        1. 使用Map来进行包装数据
            1),在SQL语句映射的ResultType返回的是你要查询得到的实体类
            2),穿进去的参数parameterType是你自己包装的Map类型
            3),首先你传进来的参数要和SQL语句中的字段名要保持一致
            4),在实体DAO层还需要把查询数据的起始下标，和查询多少条数据都put进Map中
        2. 使用RowBounds来实现分页
            1),只需要设置一个返回值为User实体类型
            2),RowBounds rowBounds= new RowBounds((currentPage-1)*pageSize,pageSize);
            3),就是上一步多了一个创建一个RowBounds对象，然后需要传入SQL语句中需要的参数就行了
            4),然后sqlSession在执行selectList的时候把那个rowBounds对象直接传进去就可以了

    四、如何使用面向接口的注解的动态代理的方式去实现增删改查功能
        1. 首先要先创建一个接口类
            1),写一个接口
            2),然后上面使用注解的方式把SQL语句写进去
        2. 然后直接在全局的xml配置文件下的mapper下把那个接口的类给关联进去
        3. 在测试功能的时候就比较麻烦了点
            1),先得到SQLsession对象
            2),在通过SQLsession对象去得到那个要实现功能的接口的mapper对象 返回的是那个接口类型
            3),在用那个接口类型的mapper对象去调用接口的那个方法就可以了

    五、如何实现SQL中的多对一的处理方式()
        1.


    六、如何实现SQL中的一对多的处理方式（这里是由一个老师去查询多个学生）
        1. 第一步是先考虑是一对多 还是多对一，是先去考虑查询谁
        2. 如果是一对多，就需要在“一”的那个实体类中加一个返回“多”的那个属性生成set，gett方法
        3. 第二步就是开始写mapper的xml映射文件的SQL语句，先考虑那个实体类去主动查询另一个实体类
        4. 最终就是为了得到Student对象，所以需要先得到Teacher对象，然后在Teacher的返回集写的是student的Map集合
        5. 然后定义Map集合，然后在关联collection集合，再把整个mapper映射的xml文件路径给配置到Mybatis的全局配置文件中
        6. 最后再创建一个TeacherDao的的类创建一个得到Teacher的方法
        7. 然后测试类



    七、如何实现SQL中的多对多的处理方式

    总结：
        1. 其实就是谁对谁就是在谁的实体类中去
        2. 在使用多对一的时候用到的是associalation(用它的时候用到的事javaType)，在使用一对多的时候用到的是collection 来进行关联的时候用到的是ofType
        3. property 就是你要把这个SQL语句执行的结果映射到哪呢，需要这样考虑
    -->


    <!-- 加载属性文件 -->
    <properties resource="db.properties">
        <!--properties中还可以配置一些属性名和属性值  -->
        <!-- <property name="jdbc.driver" value=""/> -->
    </properties>
    <!-- 全局配置参数，需要时再设置 -->
    <!-- <settings>

    </settings> -->

    <!-- 别名定义 -->
    <typeAliases>

        <!-- 针对单个别名定义
        type：类型的路径
        alias：别名
         -->
        <typeAlias type="beans.User" alias="User"/>

        <!-- <typeAlias type="cn.itcast.mybatis.po.User" alias="user"/> -->
        <!-- 批量别名定义
        指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以）
        -->
        <package name="beans"/>
    </typeAliases>

    <!-- 和spring整合后 environments配置将废除-->
    <environments default="development">
        <environment id="development">
            <!-- 使用jdbc事务管理，事务控制由mybatis-->
            <transactionManager type="JDBC" />
            <!-- 数据库连接池，由mybatis管理-->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}" />
                <property name="url" value="${jdbc.url}" />
                <property name="username" value="${jdbc.username}" />
                <property name="password" value="${jdbc.password}" />
            </dataSource>
        </environment>
    </environments>
    <!-- 加载 的映射文件，也就是把你需要加载的xml文件加载到mybatis的全局配置文件中去 -->
    <mappers>

        <!--在写需要代理的xml文件(里面是select，方法的那个)的时候包名含有. -->
        <mapper resource="beans/user.mapper.xml"/>
        <mapper class="dao.UserDaoIntface"/>

        <!--这个是一对多的按结果嵌套来映射的-->
        <mapper resource="beans/student.mapper.xml"/>

        <!--这个是一对多的按查询结果来映射的,如果按正规的就应该分开来写，一个bean一个mapper对应的xml-->
        <mapper resource="beans/teacher.mapper.xml"/>

        <!--通过resource方法一次加载一个映射文件 -->
        <!-- <mapper resource="mapper/UserMapper.xml"/> -->

        <!-- 通过mapper接口加载单个 映射文件
        遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中
        上边规范的前提是：使用的是mapper代理方法
         -->
        <!-- <mapper class="cn.itcast.mybatis.mapper.UserMapper"/> -->

        <!-- 批量加载mapper
        指定mapper接口的包名，my	batis自动扫描包下边所有mapper接口进行加载
        遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 中
        上边规范的前提是：使用的是mapper代理方法
         -->


    </mappers>



</configuration>
